//file:noinspection GradlePackageUpdate
plugins {
    id "net.minecraftforge.gradle.forge" version "6f53277"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id 'org.jetbrains.kotlin.jvm' version "1.6.10"
    id "net.kyori.blossom" version "1.3.0"
    id "java"
}

version = mod_version
group = "com.raeids"
archivesBaseName = mod_name

blossom {
    String className = "src/main/kotlin/com/raeids/stratus/Stratus.kt"
    replaceToken("@VER@", project.version, className)
    replaceToken("@NAME@", mod_name, className)
    replaceToken("@ID@", mod_id, className)
}

sourceCompatibility = targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"
    makeObfSourceJar = false

    clientRunArgs += "--mixin mixins.${mod_id}.json"
    clientRunArgs += '--tweakClass gg.essential.loader.stage0.EssentialSetupTweaker'
}

configurations {
    // Creates an extra configuration that implements `implementation` to be used later as the configuration that shades libraries
    include
    implementation.extendsFrom(include)
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io/' }
    maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
    maven { url 'https://repo.sk1er.club/repository/maven-releases/' }
}

dependencies {
    include ('gg.essential:loader-launchwrapper:1.1.3') {
        transitive = false
    }
    compileOnly 'gg.essential:essential-1.8.9-forge:1725'
    compileOnly 'org.spongepowered:mixin:0.8.4'
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

    // dependencies for mixin that aren't applied
    annotationProcessor 'com.google.code.gson:gson:2.2.4'
    annotationProcessor 'com.google.guava:guava:21.0'
    annotationProcessor 'org.ow2.asm:asm-tree:6.2'
    annotationProcessor 'org.apache.logging.log4j:log4j-core:2.0-beta9'
}

ext {
    mixinSrg = new File(project.buildDir, 'tmp/mixins/mixins.srg')
    mixinRefMap = new File(project.buildDir, "tmp/mixins/mixins.${mod_id}.refmap.json")
}

/**
 * This task simply replaces the `${version}` and `${mcversion}` properties in the mcmod.info with the data from Gradle
 */
processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", version
    inputs.property "mcversion", minecraft.version
    inputs.property "name", mod_name
    inputs.property "id", mod_id

    filesMatching("mcmod.info") {
        expand(
                "id": mod_id,
                "name": mod_name,
                "version": version,
                "mcversion": minecraft.version
        )
    }
    filesMatching("mixins.${mod_id}.json") {
        expand("id": mod_id)
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

jar {
    manifest.attributes(
            'ModSide': 'CLIENT',
            'ForceLoadAsMod': true,
            'TweakClass': 'gg.essential.loader.stage0.EssentialSetupTweaker',
            'MixinConfigs': "mixins.${mod_id}.json"
    )
    enabled = false
}


// This adds support to ("include") libraries into our JAR
shadowJar {
    archiveClassifier.set('')
    configurations = [project.configurations.include]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    from files(project.mixinRefMap.canonicalPath)
}

reobf {
    shadowJar {
        classpath = sourceSets.main.compileClasspath
    }
}

tasks.reobfJar.dependsOn tasks.shadowJar
sourceSets {
    dummy
    main {
        compileClasspath += dummy.output
        output.resourcesDir = file("${buildDir}/classes/kotlin/main")
    }
}

compileJava {
    options.compilerArgs += [
            "-AoutSrgFile=${project.mixinSrg.canonicalPath}",
            "-AoutRefMapFile=${project.mixinRefMap.canonicalPath}",
            "-AreobfSrgFile=${project.file('build/mcp-srg.srg').canonicalPath}"
    ]
}

task copySrg(type: Copy, dependsOn: 'genSrgs') {
    from { project.tasks.genSrgs.mcpToSrg }
    into 'build'
}
compileJava.dependsOn copySrg

reobfJar.addSecondarySrgFile project.mixinSrg
